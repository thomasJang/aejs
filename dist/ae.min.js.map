{"version":3,"sources":["ae.js"],"names":["root","this","isEqualAll","arr","toArray","arguments","len","length","isEqual","equalAll","msg","equal","PRIMITIVE_VALUES","RETURN_MESSAGES","LENGTH","KEY","CLASS","VALUE","toString","obj","call","arg","slice","keys","Object","isContains","indexOf","a","b","currA","currB","stackA","stackB","pop","str","push","key","hasOwnProperty","message","JSON","stringify"],"mappings":"CAAA,WACA,GAAAA,GAAAC,IAIAD,GAAA,GAAA,WA6MA,QAAAE,KAIA,IAHA,GAAAC,GAAAC,EAAAC,WACAC,EAAAH,EAAAI,SAEAD,GACA,IAAAE,EAAAL,EAAAG,GAAAH,EAAAG,EAAA,IAAA,OAAA,CAIA,OAFAH,GAAA,KACAG,EAAA,MACA,EAYA,QAAAG,KAKA,IAJA,GAAAN,GAAAC,EAAAC,WACAC,EAAAH,EAAAI,OACAG,EAAA,KAEAJ,GACA,GAAAI,EAAAC,EAAAR,EAAAG,GAAAH,EAAAG,EAAA,IAAA,MAAAI,EAIA,OAFAP,GAAA,KACAG,EAAA,KACAI,EA1OA,KAAAE,IACA,gBACA,qBACA,kBACA,kBACA,oBAEAC,GACAC,OAAA,uBACAC,IAAA,gBACAC,MAAA,uBACAC,MAAA,kBAEA,IAMAC,GAAA,SAAAC,GACA,SAAAD,SAAAE,KAAAD,IAEAf,EAAA,SAAAiB,GACA,SAAAC,MAAAF,KAAAC,IAEAE,EAAA,SAAAJ,GACA,MAAAK,QAAAD,KAAAJ,IAUAM,EAAA,SAAAN,EAAAhB,GACA,MAAAA,GAAAuB,QAAAP,IAAA,GASAX,EAAA,SAAAmB,EAAAC,GAMA,IALA,GAEAC,GACAC,EAHAC,GAAAJ,GACAK,GAAAJ,GAIAG,EAAAxB,QAAA,CACAsB,EAAAE,EAAAE,MACAH,EAAAE,EAAAC,KAGA,IAAAC,GAAAhB,EAAAW,EACA,IAAAK,IAAAhB,EAAAY,GAAA,OAAA,CAGA,IAAAL,EAAAS,EAAAtB,IACA,GAAAiB,IAAAC,EAAA,OAAA,MAGA,CAEA,GAAAxB,GAAAiB,EAAAM,GAAAtB,MACA,IAAAD,IAAAiB,EAAAO,GAAAvB,OACA,OAAA,CAIA,IAAA,mBAAA2B,EACA,KAAA5B,KACAyB,EAAAI,KAAAN,EAAAvB,IACA0B,EAAAG,KAAAL,EAAAxB,QAKA,MAAAA,KAAA,CACA,GAAA8B,GAAAb,EAAAM,GAAAvB,EACA,KAAAwB,EAAAO,eAAAD,GAKA,OAAA,CAJAL,GAAAI,KAAAN,EAAAO,IACAJ,EAAAG,KAAAL,EAAAM,MAeA,MAJAL,GAAA,KACAC,EAAA,KACAH,EAAA,KACAC,EAAA,MACA,GAGAnB,EAAA,SAAAgB,EAAAC,GAUA,IATA,GAEAC,GACAC,EAHAC,GAAAJ,GACAK,GAAAJ,GAIAU,EAAA,SAAA5B,GACA,MAAA6B,MAAAC,UAAAX,GAAA,QAAAU,KAAAC,UAAAV,GAAA,IAAAjB,EAAAH,IAGAqB,EAAAxB,QAAA,CACAsB,EAAAE,EAAAE,MACAH,EAAAE,EAAAC,KAGA,IAAAC,GAAAhB,EAAAW,EACA,IAAAK,IAAAhB,EAAAY,GAAA,MAAAQ,GAAA,QAGA,IAAAb,EAAAS,EAAAtB,IACA,GAAAiB,IAAAC,EAAA,MAAAQ,GAAA,aAGA,CAEA,GAAAhC,GAAAiB,EAAAM,GAAAtB,MACA,IAAAD,IAAAiB,EAAAO,GAAAvB,OACA,MAAA+B,GAAA,SAIA,IAAA,mBAAAJ,EACA,KAAA5B,KACAyB,EAAAI,KAAAN,EAAAvB,IACA0B,EAAAG,KAAAL,EAAAxB,QAKA,MAAAA,KAAA,CACA,GAAA8B,GAAAb,EAAAM,GAAAvB,EACA,KAAAwB,EAAAO,eAAAD,GAKA,MAAAE,GAAA,MAJAP,GAAAI,KAAAN,EAAAO,IACAJ,EAAAG,KAAAL,EAAAM,MAiBA,MANAL,GAAA,KACAC,EAAA,KACAH,EAAA,KACAC,EAAA,KACAQ,EAAA,KAEA,GA0EA,QACApC,WAAAA,EACAO,SAAAA,QAGAW,KAAAnB","file":"ae.min.js","sourcesContent":["(function () {\n    var root = this;\n    /**\n     * @namespace ae\n     */\n    root[\"ae\"] = (function () {\n        // TODO: symbol(???)\n        const PRIMITIVE_VALUES = [\n            \"[object Null]\",\n            \"[object Undefined]\",\n            \"[object String]\",\n            \"[object Number]\",\n            \"[object Boolean]\"\n        ];\n        const RETURN_MESSAGES = {\n            \"LENGTH\": \"Key length mismatch.\",\n            \"KEY\": \"Key mismatch.\",\n            \"CLASS\": \"Class type mismatch.\",\n            \"VALUE\": \"Value mismatch.\"\n        };\n        var log = function (msg) {\n            console.log(msg);\n        };\n        var error = function (msg) {\n            throw Error(msg);\n        };\n        var toString = function (obj) {\n            return ({}).toString.call(obj);\n        };\n        var toArray = function (arg) {\n            return [].slice.call(arg);\n        };\n        var keys = function (obj) {\n            return Object.keys(obj);\n        };\n        var values = function (obj) {\n            return keys(obj).map(function (k) {\n                return obj[k];\n            });\n        };\n        var isPrimitive = function (obj) {\n            return PRIMITIVE_VALUES.indexOf(toString(obj)) > -1;\n        };\n        var isContains = function(obj, arr){\n            return arr.indexOf(obj) > -1;\n        };\n        var isArray = function (obj) {\n            return toString(obj) === \"[object Array]\";\n        };\n        var isObject = function (obj) {\n            return toString(obj) === \"[object Object]\";\n        };\n\n        var isEqual = function (a, b) {\n            var stackA = [a]; // 비교할 a값이 저장될 스택\n            var stackB = [b]; // 비교할 b값이 저장될 스택\n            var currA;  // stackA의 TOP\n            var currB;  // stackB의 TOP\n\n            while (stackA.length) {\n                currA = stackA.pop();\n                currB = stackB.pop();\n\n                // 클래스 타입이 다를 경우 false 반환\n                var str = toString(currA);\n                if (str !== toString(currB)) return false;\n\n                // 비교 값들이 원시 값일 경우 비교 후 결과 반환\n                if (isContains(str, PRIMITIVE_VALUES)){\n                    if (currA !== currB) return false;\n                }\n                // 원시 값이 아닌 다른 클래스를 가질 경우\n                else {\n                    // 오브젝트 키 길이를 비교 (Array, Object)\n                    var len = keys(currA).length;\n                    if (len !== keys(currB).length) {\n                        return false;   // 키 길이가 다를 경우 false 반환\n                    }\n                    else {\n                        // 비교 값이 배열일 경우\n                        if (str === \"[object Array]\") {\n                            while (len--) {\n                                stackA.push(currA[len]);\n                                stackB.push(currB[len]);\n                            }\n                        }// end isArray\n                        // 비교 값이 배열 외의 오브젝트일 경우 \"[object Object]\"\n                        else {\n                            while (len--) {\n                                var key = keys(currA)[len];\n                                if (currB.hasOwnProperty(key)) {\n                                    stackA.push(currA[key]);\n                                    stackB.push(currB[key]);\n                                }\n                                else {\n                                    return false;\n                                }\n                            }\n                        }// end isObject\n                    }// end else\n                }//\n            }// end while\n\n            stackA = null;\n            stackB = null;\n            currA = null;\n            currB = null;\n            return true;\n        };\n\n        var equal = function(a, b) {\n            var stackA = [a]; // 비교할 a값이 저장될 스택\n            var stackB = [b]; // 비교할 b값이 저장될 스택\n            var currA;  // stackA의 TOP\n            var currB;  // stackB의 TOP\n\n            var message = function(msg) {\n            return JSON.stringify(currA) + \" and \" + JSON.stringify(currB) + \" \" + RETURN_MESSAGES[msg];\n            };\n\n            while (stackA.length) {\n                currA = stackA.pop();\n                currB = stackB.pop();\n\n                // 클래스 타입이 다를 경우 false 반환\n                var str = toString(currA);\n                if (str !== toString(currB)) return message(\"CLASS\");\n\n                // 비교 값들이 원시 값일 경우 비교 후 결과 반환\n                if (isContains(str, PRIMITIVE_VALUES)){\n                    if (currA !== currB) return message(\"VALUE\");\n                }\n                // 원시 값이 아닌 다른 클래스를 가질 경우\n                else {\n                    // 오브젝트 키 길이를 비교 (Array, Object)\n                    var len = keys(currA).length;\n                    if (len !== keys(currB).length) {\n                        return message(\"LENGTH\"); // 키 길이가 다를 경우 false 반환\n                    }\n                    else {\n                        // 비교 값이 배열일 경우\n                        if (str === \"[object Array]\") {\n                            while (len--) {\n                                stackA.push(currA[len]);\n                                stackB.push(currB[len]);\n                            }\n                        }// end isArray\n                        // 비교 값이 배열 외의 오브젝트일 경우 \"[object Object]\"\n                        else {\n                            while (len--) {\n                                var key = keys(currA)[len];\n                                if (currB.hasOwnProperty(key)) {\n                                    stackA.push(currA[key]);\n                                    stackB.push(currB[key]);\n                                }\n                                else {\n                                    return message(\"KEY\");\n                                }\n                            }\n                        }// end isObject\n                    }// end else\n                }//\n            }// end while\n\n            stackA = null;\n            stackB = null;\n            currA = null;\n            currB = null;\n            message = null;\n\n            return \"\";\n        };\n\n        /*var recursive = function (a, b) {\n            // 클래스를 비교, 클래스 문자열 저장\n            var str = toString(a);\n            if (str !== toString(b)) return false;\n\n            // 비교 값들이 원시 값일 경우 비교 후 결과 반환\n            if (isContains(str, PRIMITIVE_VALUES)) return a === b;\n\n            // 원시 값이 아닌 다른 클래스를 가질 경우 오브젝트 키 길이를 비교 (Array, Object)\n            var len = keys(a).length;\n            if (len !== keys(b).length) return false;\n\n\n            // 비교 값이 배열일 경우\n            if (str === \"[object Array]\") {\n                while (len--) {\n                    if (!recursive(a[len], b[len])) return false;\n                }\n                // 비교 값이 배열 외의 오브젝트일 경우 \"[object Object]\"\n            } else {\n                while (len--) {\n                    var key = keys(a)[len];\n                    if (!(b.hasOwnProperty(key) && recursive(a[key], b[key]))) return false;\n                }\n            }\n            return true;\n        };*/\n\n        /**\n         * @method ae.isEqualAll\n         * @returns {boolean}\n         * @example\n         * ```js\n         * ae.isEqualAll('message', that.self.queue[0].msg);\n         * ae.isEqualAll('1', that.self.queue[0].msg, '2', '3');\n         * ```\n         */\n        function isEqualAll() {\n            var arr = toArray(arguments);\n            var len = arr.length;\n\n            while (--len) {\n                if (!isEqual(arr[len], arr[len - 1])) return false;\n            }\n            arr = null;\n            len = null;\n            return true;\n        }\n\n        /**\n         * @method ae.equalAll\n         * @returns {string}\n         * @example\n         * ```js\n         * ae.equalAll('message', that.self.queue[0].msg);\n         * ae.equalAll('1', that.self.queue[0].msg, '2', '3');\n         * ```\n         */\n        function equalAll() {\n            var arr = toArray(arguments);\n            var len = arr.length;\n            var msg = \"\";\n\n            while (--len) {\n                if (msg = equal(arr[len], arr[len - 1])) return msg;\n            }\n            arr = null;\n            len = null;\n            return msg;\n        }\n\n        return {\n            isEqualAll: isEqualAll, // @returns {Boolean}\n            equalAll: equalAll      // @returns {String}\n        };\n    })(); // end IIFE ae\n}).call(this);\n"]}